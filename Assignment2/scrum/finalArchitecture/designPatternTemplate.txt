--------------------------------------------------------------------------------
Name: (name) (so you can refer to it below)
Pattern Name: (Factory/Command/Strategy/...) 
Reference: (link to a specific version of a DP in https://www.oodesign.com/), for example...
	https://www.oodesign.com/images/design_patterns/behavioral/iterator_implementation_-_uml_class_diagram.gif

Purpose: 
	(why is this pattern implemented? think SOLID as possible reasons and explain in terms of the application)

UML: 
	(include a UML or refer to one included in the finalArchitecture directory)
	(make it easy on us, and organize the diagram so that it looks like the
	reference pattern).

Classes: 
	(list classes involved and their roles based on Reference above)
	class1: role1
	class2: role1
	class3: role1
	class4: role1

Usage: 
	(Briefly describe why a developer would be playing with this part of 
	the code and how they would use it to achieve that purpose)

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Name: Shape Factory
Pattern Name: Factory
Reference: https://www.oodesign.com/images/stories/factory%20implementation.gif

Purpose:
    The Factory pattern was implemented to align with the Open-Closed Principle.
    In our application, the ShapeFactory is responsible for creating shape
    objects (e.g., Circle, Rectangle) based on which type the user desires.
    So, when the user clicks a button to choose a shape, that shape type is passed to
    the ShapeFactory, which then instantiates the correct shape object.
    This approach ensures that our program is open for extension and closed for modification:
    We can add new shape features by creating new shape classes and updating the factory,
    instead of modifying the current existing code to support the new shape feature.
    As a result, this design keeps the application flexible and scalable.

UML:
	(UML will be made after we put things into folders).

Classes:
	ShapeFactory: Factory
	Shape: Product Interface
	Circle: ConcreteProduct
	Oval: ConcreteProduct
	Polyline: ConcreteProduct
	PrecisionEraser: ConcreteProduct
	Rectangle: ConcreteProduct
	Square: ConcreteProduct
	Squiggle: ConcreteProduct
	Text: ConcreteProduct
	Triangle: ConcreteProduct

Usage:
    A developer would use this part of the code if they wanted to add a new shape
    feature to the application. Firstly, they would need to create a new shape class
    that implements the Shape interface. Then, they would need to update ShapeFactory
    to create this new shape, by creating a new case corresponding to the shape's name
    (e.g. Hexagon would have a case "hexagon").

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Name: Strategy Factory
Pattern Name: Factory
Reference: https://www.oodesign.com/images/stories/factory%20implementation.gif

Purpose:
	(why is this pattern implemented? think SOLID as possible reasons and explain in terms of the application)

UML:
	(UML will be made after we put things into folders).

Classes:
	(list classes involved and their roles based on Reference above)
	class1: role1
	class2: role1
	class3: role1
	class4: role1

Usage:
	(Briefly describe why a developer would be playing with this part of
	the code and how they would use it to achieve that purpose)

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Name: Shape Strategy
Pattern Name: Strategy
Reference: https://www.oodesign.com/images/design_patterns/behavioral/strategy_implementation_-_uml_class_diagram.gif

Purpose:
	(why is this pattern implemented? think SOLID as possible reasons and explain in terms of the application)

UML:
	(UML will be made after we put things into folders).

Classes:
	(list classes involved and their roles based on Reference above)
	class1: role1
	class2: role1
	class3: role1
	class4: role1

Usage:
	(Briefly describe why a developer would be playing with this part of
	the code and how they would use it to achieve that purpose)

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
Name: User Action Command
Pattern Name: Command
Reference: https://www.oodesign.com/images/design_patterns/behavioral/command_implementation_-_uml_class_diagram.gif

Purpose:
	(why is this pattern implemented? think SOLID as possible reasons and explain in terms of the application)

UML:
	(UML will be made after we put things into folders).

Classes:
	(list classes involved and their roles based on Reference above)
	class1: role1
	class2: role1
	class3: role1
	class4: role1

Usage:
	(Briefly describe why a developer would be playing with this part of
	the code and how they would use it to achieve that purpose)

--------------------------------------------------------------------------------